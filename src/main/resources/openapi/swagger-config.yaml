openapi: 3.0.1
info:
  title: Agroex API
  description: Spring Boot Application
  version: "1.0"
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Lot controller
  description: Lot API
- name: User controller
  description: User API
paths:
  /users/{id}:
    get:
      tags:
      - User controller
      summary: Get user by its id
      operationId: getById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfully returned
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        "404":
          description: User with this id not found
    put:
      tags:
      - User controller
      summary: Update existing user by its id (must send all fields)
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "200":
          description: Successfully updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        "404":
          description: User with this id not found
    delete:
      tags:
      - User controller
      summary: Delete user by its id
      operationId: deleteUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfully deleted
        "404":
          description: User with this id not found
  /lots/{id}:
    get:
      tags:
      - Lot controller
      summary: Get lot by its id
      operationId: findById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfully returned
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Lot'
        "404":
          description: Lot with this id not found
    put:
      tags:
      - Lot controller
      summary: Update existing lot (must send all fields)
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lot'
        required: true
      responses:
        "404":
          description: Lot with this id not found
        "200":
          description: Successfully updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Lot'
    delete:
      tags:
      - Lot controller
      summary: Delete lot by its id
      operationId: deleteById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfully deleted
  /users:
    get:
      tags:
      - User controller
      summary: Get all created users
      operationId: getAll
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
    post:
      tags:
      - User controller
      summary: Create user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "200":
          description: Successfully created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
  /lots:
    get:
      tags:
      - Lot controller
      summary: Get all lots by its id
      operationId: findAll
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lot'
    post:
      tags:
      - Lot controller
      summary: Create lot
      operationId: save
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lot'
        required: true
      responses:
        "200":
          description: Successfully created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Lot'
components:
  schemas:
    UserDTO:
      required:
      - email
      - phoneNumber
      - username
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: 123_user_321
        email:
          type: string
          example: user_test@gmail.com
        password:
          type: string
          writeOnly: true
          example: user-test123321
        phoneNumber:
          type: string
          example: "+375448901238"
        registrationDate:
          type: string
          format: date-time
          readOnly: true
          example: 2024-01-26T15:52:08.8822866Z
        emailVerified:
          type: boolean
          readOnly: true
          example: true
    Image:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 0776a0db-200e-40ca-a353-980b92785346.jpg
    Location:
      type: object
      properties:
        id:
          type: integer
          format: int64
        country:
          type: string
          example: Belarus
        region:
          type: string
          example: Minsk region
        latitude:
          type: string
          example: "53.902284"
        longitude:
          type: string
          example: "27.561831"
    Lot:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Braeburn Apples
        description:
          type: string
          example: "Fresh Central Otago Braeburn Apples delivered direct to your door.\
            \ The best flavoured apple, great for eating. Long lasting."
        quantity:
          type: integer
          format: int32
          example: 10000
        pricePerTon:
          type: number
          format: float
          example: 1299
        currency:
          type: string
          example: USD
        creationDate:
          type: string
          format: date-time
          example: 2024-01-26T15:52:08.8822866Z
        expirationDate:
          type: string
          format: date-time
          example: 2024-01-26T15:52:08.8822866Z
        productCategory:
          $ref: '#/components/schemas/ProductCategory'
        lotType:
          type: string
          example: sell
        user:
          $ref: '#/components/schemas/User'
        location:
          $ref: '#/components/schemas/Location'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    ProductCategory:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        title:
          type: string
          example: Fruits
        parentId:
          type: integer
          format: int64
          example: 1
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: fresh
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        registrationDate:
          type: string
          format: date-time
        emailVerified:
          type: boolean
